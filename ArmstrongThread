class ArmstrongThread extends Thread {
    private int start;
    private int end;

    public ArmstrongThread(int start, int end) {
        this.start = start;
        this.end = end;
    }

    @Override
    public void run() {
        System.out.println("Armstrong Thread Started.");
        for (int i = start; i <= end; i++) {
            if (isArmstrong(i)) {
                System.out.println(i + " is an Armstrong number.");
            }
        }
        System.out.println("Armstrong Thread Completed.");
    }

    private boolean isArmstrong(int num) {
        int originalNum, remainder, result = 0, n = 0;
        originalNum = num;
        while (originalNum != 0) {
            originalNum /= 10;
            ++n;
        }
        originalNum = num;
        while (originalNum != 0) {
            remainder = originalNum % 10;
            result += Math.pow(remainder, n);
            originalNum /= 10;
        }
        return result == num;
    }
}

class FibonacciThread extends Thread {
    private int n;

    public FibonacciThread(int n) {
        this.n = n;
    }

    @Override
    public void run() {
        System.out.println("Fibonacci Thread Started.");
        int a = 0, b = 1, c;
        for (int i = 0; i < n; i++) {
            System.out.print(a + " ");
            c = a + b;
            a = b;
            b = c;
        }
        System.out.println("\nFibonacci Thread Completed.");
    }
}

public class ThreadLifecycleDemo {
    public static void main(String[] args) {
        ArmstrongThread t1 = new ArmstrongThread(100, 999);
        FibonacciThread t2 = new FibonacciThread(10);

        t1.start();
        t2.start();

        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("Main Thread Completed.");
    }
}
